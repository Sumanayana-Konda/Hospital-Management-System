/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterfacePatient;
import Hospital.Ecosystem;
import Model.Appointments;
import Model.Insurance_Request;
import Roles.Patient;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author sumanayanakonda
 */
public class InsurancePatient extends javax.swing.JPanel {
Ecosystem ecoSystem;
Patient patient; 
/**
     * Creates new form InsurancePatient
     */
    public InsurancePatient(Ecosystem  ecoSystem, Patient patient) {
        initComponents();
        this. ecoSystem= ecoSystem;
        this.patient = patient;
        TableFilling();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        income = new javax.swing.JTextField();
        req = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ins = new javax.swing.JTable();
        kind = new javax.swing.JLabel();
        Kind = new javax.swing.JComboBox<>();
        employment = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(204, 204, 255));

        jLabel1.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        jLabel1.setText("Insurance Request");

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel2.setText("Income:");

        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel3.setText("Employment:");

        req.setBackground(new java.awt.Color(153, 153, 255));
        req.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        req.setText("Request");
        req.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reqActionPerformed(evt);
            }
        });

        ins.setBackground(new java.awt.Color(153, 153, 255));
        ins.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Kind", "Status"
            }
        ));
        jScrollPane1.setViewportView(ins);

        kind.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        kind.setText("Kind:");

        Kind.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Health Insurance", "Medicine Insurance", "Life Insurance", "Surgery Insurance" }));

        employment.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Government Worker", "Self Employed", "Unemployed", "Office Worker", "Other" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(145, 145, 145)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(kind)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel2)))
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel1)
                                    .addComponent(income)
                                    .addComponent(Kind, 0, 251, Short.MAX_VALUE)
                                    .addComponent(employment, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(320, 320, 320)
                        .addComponent(req)))
                .addContainerGap(249, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(31, 31, 31)
                        .addComponent(jLabel2))
                    .addComponent(income, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(employment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(kind)
                    .addComponent(Kind, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addComponent(req)
                .addGap(31, 31, 31)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(262, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void reqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reqActionPerformed
        // TODO add your handling code here:
        String in = income.getText();
        String emp = employment.getSelectedItem().toString();
        String name = Kind.getSelectedItem().toString();
        Insurance_Request e = new Insurance_Request();
        e.setEmployment(emp);
        e.setIncome(Integer.valueOf(in));
        e.setInsurancename(name);
        e.setPatient(patient);
        ecoSystem.getInsurancereqdir().getInsuranceReqList().add(e);
        
    }//GEN-LAST:event_reqActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> Kind;
    private javax.swing.JComboBox<String> employment;
    private javax.swing.JTextField income;
    private javax.swing.JTable ins;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel kind;
    private javax.swing.JButton req;
    // End of variables declaration//GEN-END:variables

    private void TableFilling() {
    
        DefaultTableModel model = (DefaultTableModel) ins.getModel();
        model.setRowCount(0);
        for(Insurance_Request en : ecoSystem.getInsurancereqdir().getInsuranceReqList())
             if (patient.getEmailId().equals(en.getPatient().getEmailId())){
            {    
            Object[] row = new Object[2];
            row[0] = en.getInsurancename();
            row[1] = en.getStatus();
            model.addRow(row);
            }
             }
    
    }
}
