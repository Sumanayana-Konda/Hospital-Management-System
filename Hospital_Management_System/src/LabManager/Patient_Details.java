/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package LabManager;

import Hospital.Ecosystem;
import Model.Lab_Reports;
import Roles.Doctor;
import Roles.Patient;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sonalibandi
 */
public class Patient_Details extends javax.swing.JPanel {
Ecosystem ecoSystem;
Lab_Reports rep;
Patient p;
int rowNum;
    /**
     * Creates new form Patient_Details
     * @param rep
     */
    public Patient_Details(Ecosystem ecoSystem, Lab_Reports rep) {
        initComponents();
        this.ecoSystem=ecoSystem;
        this.rep = rep;
        populateTable();
        bloodcount.setName("Blood Count"); 
        hemo.setName("Hemogoblin Levels"); 
        ecg.setName("EEG Levels"); 
        sugarlevels.setName("Sugar Levels"); 
        bloodtype.setName("Blood Type");
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lab = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        bloodtype = new javax.swing.JTextField();
        name = new javax.swing.JTextField();
        hemo = new javax.swing.JTextField();
        bloodcount = new javax.swing.JTextField();
        sugarlevels = new javax.swing.JTextField();
        ecg = new javax.swing.JTextField();
        date = new com.toedter.calendar.JDateChooser();
        Update = new javax.swing.JButton();
        Delete = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 204, 255));

        lab.setBackground(new java.awt.Color(153, 153, 255));
        lab.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Patient", "Date", "Blood Type", "Hemogoblin Levels", "Blood Count", "ECG levels", "Sugar Levels"
            }
        ));
        jScrollPane1.setViewportView(lab);

        jButton1.setBackground(new java.awt.Color(153, 153, 255));
        jButton1.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jButton1.setText("View");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel1.setText("Patient Name:");

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel2.setText("Date:");

        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel3.setText("Blood Type:");

        jLabel4.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel4.setText("Hemogoblin Levels");

        jLabel5.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel5.setText("Blood Count:");

        jLabel6.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel6.setText("ECG levels:");

        jLabel7.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel7.setText("Sugar Levels:");

        bloodtype.setBackground(new java.awt.Color(153, 153, 255));

        name.setEditable(false);
        name.setBackground(new java.awt.Color(153, 153, 255));

        hemo.setBackground(new java.awt.Color(153, 153, 255));

        bloodcount.setBackground(new java.awt.Color(153, 153, 255));

        sugarlevels.setBackground(new java.awt.Color(153, 153, 255));

        ecg.setBackground(new java.awt.Color(153, 153, 255));

        Update.setBackground(new java.awt.Color(153, 153, 255));
        Update.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        Update.setText("Update");
        Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateActionPerformed(evt);
            }
        });

        Delete.setBackground(new java.awt.Color(153, 153, 255));
        Delete.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(162, 162, 162)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sugarlevels, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bloodcount, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(date, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(bloodtype, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ecg)
                    .addComponent(hemo))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(374, 374, 374)
                        .addComponent(Update, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(449, 449, 449)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 805, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(112, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {bloodcount, bloodtype, ecg, hemo, name, sugarlevels});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(bloodtype, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addComponent(hemo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(bloodcount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ecg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(sugarlevels, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Update)
                    .addComponent(Delete))
                .addGap(106, 106, 106))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int selectRowIndex = lab.getSelectedRow();
        rowNum = selectRowIndex;
        
        if (selectRowIndex < 0){
            JOptionPane.showMessageDialog(this,"Select a row to view");
            return;        
        }
        DefaultTableModel model = (DefaultTableModel) lab.getModel();
        Lab_Reports d = (Lab_Reports)model.getValueAt(selectRowIndex, 0);
        name.setText(d.getPatient().getFirstName()+" "+d.getPatient().getLastName());
        ecg.setText(String.valueOf(d.getEEG_Levels()));
        hemo.setText(String.valueOf(d.getHemogoblinLevels()));
        sugarlevels.setText(String.valueOf(d.getSugarLevels()));
        date.setDate(d.getDateitsdone());
        bloodtype.setText(d.getBloodType());
        bloodcount.setText(String.valueOf(d.getBloodCount()));
    }//GEN-LAST:event_jButton1ActionPerformed

    private void UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateActionPerformed
        // TODO add your handling code here:
         int selectRowIndex = lab.getSelectedRow();
        rowNum = selectRowIndex;
        
        if (selectRowIndex < 0){
            JOptionPane.showMessageDialog(this,"Select a row to view");
            return;        
        }
                 boolean validated = false;
boolean validatedOtherFields = false;

        JTextField[] VARIABLE_CONSTANTS = {bloodcount, hemo, ecg, sugarlevels, bloodtype};
         if(date.getDate()!=null){
            validatedOtherFields = true;
        }
        else{
            JOptionPane.showMessageDialog(this, "All Fields are Mandatory!");
        }
        for (JTextField field : VARIABLE_CONSTANTS) {
            if (!validateData(field)) {
                validated = false;
                break;
            } else {
                validated = true;
                System.out.println("Validated");
            }
        }

        if (validated) {
        DefaultTableModel model = (DefaultTableModel) lab.getModel();
        Lab_Reports d = (Lab_Reports)model.getValueAt(selectRowIndex, 0);
        d.setBloodCount(Integer.valueOf(bloodcount.getText()));
        d.setBloodType(bloodtype.getText());
        d.setDateitsdone(date.getDate());
        d.setEEG_Levels(Integer.valueOf(ecg.getText()));
        d.setHemogoblinLevels(Integer.valueOf(hemo.getText()));
        d.setSugarLevels(Integer.valueOf(sugarlevels.getText()));}
    }//GEN-LAST:event_UpdateActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        // TODO add your handling code here:
        int selectRowIndex = lab.getSelectedRow();
        rowNum = selectRowIndex;
        
        if (selectRowIndex < 0){
            JOptionPane.showMessageDialog(this,"Select a row to view");
            return;        
        }
        DefaultTableModel model = (DefaultTableModel) lab.getModel();
        Lab_Reports d = (Lab_Reports)model.getValueAt(selectRowIndex, 0);
        ecoSystem.getLabreportsdir().getLabReportsList().remove(d);
    }//GEN-LAST:event_DeleteActionPerformed
 public boolean validateData(JComponent input) {
        String name = input.getName();
        String errorMsg = "";
        boolean raiseError = false;
        String text = ((JTextField) input).getText().trim();
        if (text == null || text.isEmpty()) {
            raiseError = true;
            errorMsg = String.format("Please enter a value. The value for %s cannot be empty", name);
        } else {
            switch (name) {
                case "Sugar Levels":
                    if (!text.matches("^[0-9]{1}||[0-9]{2}||[0-9]{3}")) {
                        raiseError = true;
                        errorMsg = String.format("Please enter valid values for %s", name);
                    }
                    break;
                case "Hemogoblin Levels":
                    if (!text.matches("^[0-9]{1}||[0-9]{2}||[0-9]{3}")) {
                        raiseError = true;
                        errorMsg = String.format("Please enter a valid %s", name);
                    }
                    break;
                 case "Blood Count":
                    if (!text.matches("^[0-9]{1}||[0-9]{2}||[0-9]{3}")) {
                        raiseError = true;
                        errorMsg = String.format("Please enter a valid %s", name);
                    }
                    break;
                 case "EEG Levels":
                    if (!text.matches("^[0-9]{1}||[0-9]{2}||[0-9]{3}")) {
                        raiseError = true;
                        errorMsg = String.format("Please enter a valid %s", name);
                    }
                    break;
                default:
                    break;
            }
        }
        if (raiseError) {
            JOptionPane.showMessageDialog(this, errorMsg);
            return false;
        }
        return true;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Delete;
    private javax.swing.JButton Update;
    private javax.swing.JTextField bloodcount;
    private javax.swing.JTextField bloodtype;
    private com.toedter.calendar.JDateChooser date;
    private javax.swing.JTextField ecg;
    private javax.swing.JTextField hemo;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable lab;
    private javax.swing.JTextField name;
    private javax.swing.JTextField sugarlevels;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {       
    
     DefaultTableModel model = (DefaultTableModel) lab.getModel();
        model.setRowCount(0);
        for(Lab_Reports r : ecoSystem.getLabreportsdir().getLabReportsList()){
                
            Object[] row = new Object[7];
            row[0] = r;
            row[1] = r.getDateitsdone();
            row[2] = r.getBloodType();
            row[3] = r.getHemogoblinLevels();
            row[4] = r.getBloodCount();
            row[5] = r.getEEG_Levels();
            row[6] = r.getSugarLevels();
            
            model.addRow(row);
            }
             
    }
}
