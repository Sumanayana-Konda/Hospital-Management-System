/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package SystemAdmin;

import Directories.Medicine_Directory;
import Hospital.Ecosystem;
import Model.Appointments;
import Model.Beds;
import Model.House;
import Model.Person;
import Roles.Bed_Manager;
import Roles.DeliveryManager;
import Roles.Delivery_Man;
import Roles.DepartmentManager;
import Roles.Doctor;
import Roles.InsuranceSpecialist;
import Roles.Lab_Manager;
import Roles.Operation_Manager;
import Roles.Patient;
import Roles.Payment_Manager;
import Roles.Pharmacist;
import Roles.Volunteer;
import Roles.Volunteer_Manager;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sumanayanakonda
 */
public class Roles extends javax.swing.JPanel {
    Ecosystem ecoSystem;
    Person e;
    /**
     * Creates new form Roles
     */
    public Roles(Ecosystem ecosystem) {
        initComponents();
        this.ecoSystem = ecosystem;
        TableFilling();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        person = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel33 = new javax.swing.JLabel();
        search = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        firstName1 = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        lastName1 = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        eMailId1 = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        dob1 = new com.toedter.calendar.JDateChooser();
        jLabel26 = new javax.swing.JLabel();
        gender1 = new javax.swing.JComboBox<>();
        jLabel27 = new javax.swing.JLabel();
        phone1 = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        zipCode1 = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        state1 = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        city1 = new javax.swing.JComboBox<>();
        jLabel21 = new javax.swing.JLabel();
        addressLine4 = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        addressLine3 = new javax.swing.JTextField();
        update = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        jLabel32 = new javax.swing.JLabel();
        role = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(204, 204, 255));

        jTabbedPane1.setBackground(new java.awt.Color(204, 204, 255));

        jPanel1.setBackground(new java.awt.Color(204, 204, 255));

        person.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Email", "Address", "City", "State", "Date of Birth", "Role", "Password"
            }
        ));
        jScrollPane1.setViewportView(person);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(101, 101, 101)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 676, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(269, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(134, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Person Directory", jPanel1);

        jPanel2.setBackground(new java.awt.Color(204, 204, 255));

        jLabel33.setText("Mail:");

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Department/icons8-search-24.png"))); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Helvetica", 1, 18)); // NOI18N
        jLabel18.setText("Personal Information:");

        firstName1.setBackground(new java.awt.Color(153, 153, 255));
        firstName1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstName1ActionPerformed(evt);
            }
        });

        jLabel31.setText("First Name :");

        jLabel30.setText("Last Name :");

        lastName1.setBackground(new java.awt.Color(153, 153, 255));
        lastName1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lastName1ActionPerformed(evt);
            }
        });

        jLabel29.setText("E-mail Id :");

        eMailId1.setEditable(false);
        eMailId1.setBackground(new java.awt.Color(153, 153, 255));
        eMailId1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eMailId1ActionPerformed(evt);
            }
        });

        jLabel28.setText("DOB :");

        jLabel26.setText("Gender :");

        gender1.setBackground(new java.awt.Color(153, 153, 255));
        gender1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Male", "Female", "Other" }));

        jLabel27.setText("Phone :");

        phone1.setBackground(new java.awt.Color(153, 153, 255));
        phone1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phone1ActionPerformed(evt);
            }
        });

        jLabel25.setText("Zip Code :");

        zipCode1.setBackground(new java.awt.Color(153, 153, 255));
        zipCode1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zipCode1ActionPerformed(evt);
            }
        });

        jLabel24.setText("State :");

        state1.setBackground(new java.awt.Color(153, 153, 255));
        state1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                state1ActionPerformed(evt);
            }
        });

        jLabel22.setText("City :");

        city1.setBackground(new java.awt.Color(153, 153, 255));
        city1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Boston", " " }));
        city1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                city1ItemStateChanged(evt);
            }
        });
        city1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                city1ActionPerformed(evt);
            }
        });

        jLabel21.setText("Line 2 :");

        addressLine4.setBackground(new java.awt.Color(153, 153, 255));
        addressLine4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addressLine4ActionPerformed(evt);
            }
        });

        jLabel20.setText("Line 1 :");

        addressLine3.setBackground(new java.awt.Color(153, 153, 255));
        addressLine3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addressLine3ActionPerformed(evt);
            }
        });

        update.setBackground(new java.awt.Color(153, 153, 255));
        update.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        update.setText("Update");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        delete.setBackground(new java.awt.Color(153, 153, 255));
        delete.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        jLabel32.setText("Role");

        role.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Patient", "Doctor", "Department Manager", "Operation Manager", "Lab Manager", "Finance Manager", "Bed Manager", "Staff", "Pharmacist", "Insurance Specialist", "Delivery Manager", "Delivery Man", "Volunteer Manager", "Volunteer" }));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(356, 356, 356)
                .addComponent(jLabel32)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(154, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel25, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(jPanel2Layout.createSequentialGroup()
                                                    .addGap(35, 35, 35)
                                                    .addComponent(jLabel28))
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel30)
                                                    .addComponent(jLabel31))
                                                .addComponent(jLabel26, javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(jLabel27, javax.swing.GroupLayout.Alignment.TRAILING))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(lastName1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(firstName1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(dob1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(eMailId1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(gender1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(phone1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                        .addGap(19, 19, 19)
                                        .addComponent(jLabel29)))
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(38, 38, 38)
                                        .addComponent(role, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                        .addGap(41, 41, 41)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel20, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel21, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel22, javax.swing.GroupLayout.Alignment.TRAILING)))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel33)
                                .addGap(18, 18, 18)
                                .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel24, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(jButton2))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addressLine4, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(addressLine3)
                                    .addComponent(city1, 0, 216, Short.MAX_VALUE)
                                    .addComponent(state1)
                                    .addComponent(zipCode1))))
                        .addContainerGap(155, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(update)
                        .addGap(181, 181, 181)
                        .addComponent(delete)
                        .addGap(318, 318, 318))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(jLabel33))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(25, 25, 25)
                .addComponent(jLabel18)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(firstName1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(addressLine3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel20))
                    .addComponent(jLabel31))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel30)
                            .addComponent(lastName1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel29)
                            .addComponent(eMailId1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(dob1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel28))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(gender1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel26)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel21)
                            .addComponent(addressLine4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(36, 36, 36)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel22)
                            .addComponent(city1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(state1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel24, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(6, 6, 6)))
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel25)
                        .addComponent(phone1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel27))
                    .addComponent(zipCode1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(80, 80, 80)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(role, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel32, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(47, 47, 47)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(delete)
                    .addComponent(update))
                .addGap(60, 60, 60))
        );

        jTabbedPane1.addTab("Update/Delete Roles", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1046, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

        for (Person en: ecoSystem.getPersondir().getPersonList())
        {
            if(en.getEmailId().equals(search.getText()))
            {
                firstName1.setText(en.getFirstName());
                lastName1.setText(en.getLastName());
                dob1.setDate(en.getDateOfBirth());
                eMailId1.setText(en.getEmailId());
                gender1.setSelectedItem(en.getGender());
                phone1.setText(String.valueOf(en.getPhoneNumber()));
                addressLine3.setText(en.getHouse().getAddressLine1());
                addressLine4.setText(en.getHouse().getAddressLine2());
                zipCode1.setText(String.valueOf(en.getHouse().getZipCode()));
                state1.setText(en.getHouse().getState());
                city1.setSelectedItem(en.getHouse().getCity());
                role.setSelectedItem(en.getRole());
                
            }

        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void firstName1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstName1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_firstName1ActionPerformed

    private void lastName1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lastName1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lastName1ActionPerformed

    private void eMailId1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eMailId1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_eMailId1ActionPerformed

    private void phone1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phone1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_phone1ActionPerformed

    private void zipCode1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zipCode1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_zipCode1ActionPerformed

    private void state1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_state1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_state1ActionPerformed

    private void city1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_city1ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_city1ItemStateChanged

    private void city1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_city1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_city1ActionPerformed

    private void addressLine4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addressLine4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addressLine4ActionPerformed

    private void addressLine3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addressLine3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addressLine3ActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        // TODO add your handling code here:
        for (Person e: ecoSystem.getPersondir().getPersonList())
        {
            if(e.getEmailId().equals(search.getText()))
            {
                e.setDateOfBirth(dob1.getDate());
                e.setRole(role.getSelectedItem().toString());
                e.setEmailId(eMailId1.getText());
                e.setFirstName(firstName1.getText());
                e.setGender(gender1.getSelectedItem().toString());
                e.setLastName(lastName1.getText());
                e.setPhoneNumber(Long.valueOf(phone1.getText()));
                e.setRole("Doctor");
                House house = new House();
                house.setAddressLine1(addressLine3.getText());
                house.setAddressLine2(addressLine4.getText());
                house.setCity(city1.getSelectedItem().toString());
                house.setState(state1.getText());
                house.setZipCode(Integer.valueOf(zipCode1.getText()));
                e.setHouse(house);
TableFilling();
            }}
        
         switch (role.getSelectedItem().toString()) {
                case "Department Manager":  
                    for (DepartmentManager e: ecoSystem.getDeptmanagerdir().getDeptmanagerList())
        {
            if(e.getEmailId().equals(search.getText()))
            {
                e.setDateOfBirth(dob1.getDate());
                e.setRole(role.getSelectedItem().toString());
                e.setEmailId(eMailId1.getText());
                e.setFirstName(firstName1.getText());
                e.setGender(gender1.getSelectedItem().toString());
                e.setLastName(lastName1.getText());
                e.setPhoneNumber(Long.valueOf(phone1.getText()));
                e.setRole("Doctor");
                House house = new House();
                house.setAddressLine1(addressLine3.getText());
                house.setAddressLine2(addressLine4.getText());
                house.setCity(city1.getSelectedItem().toString());
                house.setState(state1.getText());
                house.setZipCode(Integer.valueOf(zipCode1.getText()));
                e.setHouse(house);

            }}
                    break;
                case "Bed Manager":
                    for (Bed_Manager e: ecoSystem.getBedmanagerdir().getBedManagerList())
        {
            if(e.getEmailId().equals(search.getText()))
            {
                e.setDateOfBirth(dob1.getDate());
                e.setRole(role.getSelectedItem().toString());
                e.setEmailId(eMailId1.getText());
                e.setFirstName(firstName1.getText());
                e.setGender(gender1.getSelectedItem().toString());
                e.setLastName(lastName1.getText());
                e.setPhoneNumber(Long.valueOf(phone1.getText()));
                e.setRole("Doctor");
                House house = new House();
                house.setAddressLine1(addressLine3.getText());
                house.setAddressLine2(addressLine4.getText());
                house.setCity(city1.getSelectedItem().toString());
                house.setState(state1.getText());
                house.setZipCode(Integer.valueOf(zipCode1.getText()));
                e.setHouse(house);

            }}
                    break; 
                case "Delivery Manager":
                    for (DeliveryManager e: ecoSystem.getDeliverymanagerdir().getDeliveryManagerList())
        {
            if(e.getEmailId().equals(search.getText()))
            {
                e.setDateOfBirth(dob1.getDate());
                e.setRole(role.getSelectedItem().toString());
                e.setEmailId(eMailId1.getText());
                e.setFirstName(firstName1.getText());
                e.setGender(gender1.getSelectedItem().toString());
                e.setLastName(lastName1.getText());
                e.setPhoneNumber(Long.valueOf(phone1.getText()));
                e.setRole("Doctor");
                House house = new House();
                house.setAddressLine1(addressLine3.getText());
                house.setAddressLine2(addressLine4.getText());
                house.setCity(city1.getSelectedItem().toString());
                house.setState(state1.getText());
                house.setZipCode(Integer.valueOf(zipCode1.getText()));
                e.setHouse(house);

            }}
                     break; 
                case "Delivery Man":
                    for (Delivery_Man e: ecoSystem.getDeliverymandir().getDelveryManList())
        {
            if(e.getEmailId().equals(search.getText()))
            {
                e.setDateOfBirth(dob1.getDate());
                e.setRole(role.getSelectedItem().toString());
                e.setEmailId(eMailId1.getText());
                e.setFirstName(firstName1.getText());
                e.setGender(gender1.getSelectedItem().toString());
                e.setLastName(lastName1.getText());
                e.setPhoneNumber(Long.valueOf(phone1.getText()));
                e.setRole("Doctor");
                House house = new House();
                house.setAddressLine1(addressLine3.getText());
                house.setAddressLine2(addressLine4.getText());
                house.setCity(city1.getSelectedItem().toString());
                house.setState(state1.getText());
                house.setZipCode(Integer.valueOf(zipCode1.getText()));
                e.setHouse(house);

            }}
                    break;
                case "Doctor":
                    for (Doctor e: ecoSystem.getDocdir().getDocList())
        {
            if(e.getEmailId().equals(search.getText()))
            {
                e.setDateOfBirth(dob1.getDate());
                e.setRole(role.getSelectedItem().toString());
                e.setEmailId(eMailId1.getText());
                e.setFirstName(firstName1.getText());
                e.setGender(gender1.getSelectedItem().toString());
                e.setLastName(lastName1.getText());
                e.setPhoneNumber(Long.valueOf(phone1.getText()));
                e.setRole("Doctor");
                House house = new House();
                house.setAddressLine1(addressLine3.getText());
                house.setAddressLine2(addressLine4.getText());
                house.setCity(city1.getSelectedItem().toString());
                house.setState(state1.getText());
                house.setZipCode(Integer.valueOf(zipCode1.getText()));
                e.setHouse(house);

            }}
                     break; 
                case "Insurance Specialist":
                    for (InsuranceSpecialist e: ecoSystem.getInsurancespecialist().getInsuranceSpecialistList())
        {
            if(e.getEmailId().equals(search.getText()))
            {
                e.setDateOfBirth(dob1.getDate());
                e.setRole(role.getSelectedItem().toString());
                e.setEmailId(eMailId1.getText());
                e.setFirstName(firstName1.getText());
                e.setGender(gender1.getSelectedItem().toString());
                e.setLastName(lastName1.getText());
                e.setPhoneNumber(Long.valueOf(phone1.getText()));
                e.setRole("Doctor");
                House house = new House();
                house.setAddressLine1(addressLine3.getText());
                house.setAddressLine2(addressLine4.getText());
                house.setCity(city1.getSelectedItem().toString());
                house.setState(state1.getText());
                house.setZipCode(Integer.valueOf(zipCode1.getText()));
                e.setHouse(house);

            }}
                    break;
                case "Lab Manager":
                    for (Lab_Manager e: ecoSystem.getLabmanagerdir().getLabManagerList())
        {
            if(e.getEmailId().equals(search.getText()))
            {
                e.setDateOfBirth(dob1.getDate());
                e.setRole(role.getSelectedItem().toString());
                e.setEmailId(eMailId1.getText());
                e.setFirstName(firstName1.getText());
                e.setGender(gender1.getSelectedItem().toString());
                e.setLastName(lastName1.getText());
                e.setPhoneNumber(Long.valueOf(phone1.getText()));
                e.setRole("Doctor");
                House house = new House();
                house.setAddressLine1(addressLine3.getText());
                house.setAddressLine2(addressLine4.getText());
                house.setCity(city1.getSelectedItem().toString());
                house.setState(state1.getText());
                house.setZipCode(Integer.valueOf(zipCode1.getText()));
                e.setHouse(house);

            }}
                     break;
                case "Operation Manager":
                    for (Operation_Manager e: ecoSystem.getOperationmanagerdir().getOpManagerList())
        {
            if(e.getEmailId().equals(search.getText()))
            {
                e.setDateOfBirth(dob1.getDate());
                e.setRole(role.getSelectedItem().toString());
                e.setEmailId(eMailId1.getText());
                e.setFirstName(firstName1.getText());
                e.setGender(gender1.getSelectedItem().toString());
                e.setLastName(lastName1.getText());
                e.setPhoneNumber(Long.valueOf(phone1.getText()));
                e.setRole("Doctor");
                House house = new House();
                house.setAddressLine1(addressLine3.getText());
                house.setAddressLine2(addressLine4.getText());
                house.setCity(city1.getSelectedItem().toString());
                house.setState(state1.getText());
                house.setZipCode(Integer.valueOf(zipCode1.getText()));
                e.setHouse(house);

            }}
                    break;
                case "Patient":
                    for (Patient e: ecoSystem.getPatientdir().getPatientList())
        {
            if(e.getEmailId().equals(search.getText()))
            {
                e.setDateOfBirth(dob1.getDate());
                e.setRole(role.getSelectedItem().toString());
                e.setEmailId(eMailId1.getText());
                e.setFirstName(firstName1.getText());
                e.setGender(gender1.getSelectedItem().toString());
                e.setLastName(lastName1.getText());
                e.setPhoneNumber(Long.valueOf(phone1.getText()));
                e.setRole("Doctor");
                House house = new House();
                house.setAddressLine1(addressLine3.getText());
                house.setAddressLine2(addressLine4.getText());
                house.setCity(city1.getSelectedItem().toString());
                house.setState(state1.getText());
                house.setZipCode(Integer.valueOf(zipCode1.getText()));
                e.setHouse(house);

            }}
                   break;
                case "Finance Manager":
                    for (Payment_Manager e: ecoSystem.getPaymentmanager().getPaymentManagerList())
        {
            if(e.getEmailId().equals(search.getText()))
            {
                e.setDateOfBirth(dob1.getDate());
                e.setRole(role.getSelectedItem().toString());
                e.setEmailId(eMailId1.getText());
                e.setFirstName(firstName1.getText());
                e.setGender(gender1.getSelectedItem().toString());
                e.setLastName(lastName1.getText());
                e.setPhoneNumber(Long.valueOf(phone1.getText()));
                e.setRole("Doctor");
                House house = new House();
                house.setAddressLine1(addressLine3.getText());
                house.setAddressLine2(addressLine4.getText());
                house.setCity(city1.getSelectedItem().toString());
                house.setState(state1.getText());
                house.setZipCode(Integer.valueOf(zipCode1.getText()));
                e.setHouse(house);

            }}
                    break;
                case "Pharmacist":
                    for (Pharmacist e: ecoSystem.getPharmacist().getPharmacistList())
        {
            if(e.getEmailId().equals(search.getText()))
            {
                e.setDateOfBirth(dob1.getDate());
                e.setRole(role.getSelectedItem().toString());
                e.setEmailId(eMailId1.getText());
                e.setFirstName(firstName1.getText());
                e.setGender(gender1.getSelectedItem().toString());
                e.setLastName(lastName1.getText());
                e.setPhoneNumber(Long.valueOf(phone1.getText()));
                e.setRole("Doctor");
                House house = new House();
                house.setAddressLine1(addressLine3.getText());
                house.setAddressLine2(addressLine4.getText());
                house.setCity(city1.getSelectedItem().toString());
                house.setState(state1.getText());
                house.setZipCode(Integer.valueOf(zipCode1.getText()));
                e.setHouse(house);

            }}
                     break;
                case "Volunteer":
                     for (Volunteer e: ecoSystem.getVolunteerdir().getVolunteerList())
        {
            if(e.getEmailId().equals(search.getText()))
            {
                e.setDateOfBirth(dob1.getDate());
                e.setRole(role.getSelectedItem().toString());
                e.setEmailId(eMailId1.getText());
                e.setFirstName(firstName1.getText());
                e.setGender(gender1.getSelectedItem().toString());
                e.setLastName(lastName1.getText());
                e.setPhoneNumber(Long.valueOf(phone1.getText()));
                e.setRole("Doctor");
                House house = new House();
                house.setAddressLine1(addressLine3.getText());
                house.setAddressLine2(addressLine4.getText());
                house.setCity(city1.getSelectedItem().toString());
                house.setState(state1.getText());
                house.setZipCode(Integer.valueOf(zipCode1.getText()));
                e.setHouse(house);

            }}
                     break;
                case "Volunteer Manager":
                     for (Volunteer_Manager e: ecoSystem.getVolunteermanagerdir().getVolunteerManagerList())
        {
            if(e.getEmailId().equals(search.getText()))
            {
                e.setDateOfBirth(dob1.getDate());
                e.setRole(role.getSelectedItem().toString());
                e.setEmailId(eMailId1.getText());
                e.setFirstName(firstName1.getText());
                e.setGender(gender1.getSelectedItem().toString());
                e.setLastName(lastName1.getText());
                e.setPhoneNumber(Long.valueOf(phone1.getText()));
                e.setRole("Doctor");
                House house = new House();
                house.setAddressLine1(addressLine3.getText());
                house.setAddressLine2(addressLine4.getText());
                house.setCity(city1.getSelectedItem().toString());
                house.setState(state1.getText());
                house.setZipCode(Integer.valueOf(zipCode1.getText()));
                e.setHouse(house);

            }}
                    break; 
                default:
                    break;
            }
 

    }//GEN-LAST:event_updateActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed

        for (Person e: ecoSystem.getPersondir().getPersonList())
        {
            if(e.getEmailId().equals(search.getText()))
            {
                ecoSystem.getPersondir().getPersonList().remove(e);
TableFilling();
            }}
        
         switch (role.getSelectedItem().toString()) {
                case "Department Manager":
                    for (DepartmentManager e: ecoSystem.getDeptmanagerdir().getDeptmanagerList())
        {
            if(e.getEmailId().equals(search.getText()))
            {
                ecoSystem.getDeptmanagerdir().getDeptmanagerList().remove(e);

            }}
                    break;
                case "Bed Manager":
                    for (Bed_Manager e: ecoSystem.getBedmanagerdir().getBedManagerList())
        {
            if(e.getEmailId().equals(search.getText()))
            {
                ecoSystem.getBedmanagerdir().getBedManagerList().remove(e);

            }}
                    break; 
                case "Delivery Manager":
                    for (DeliveryManager e: ecoSystem.getDeliverymanagerdir().getDeliveryManagerList())
        {
            if(e.getEmailId().equals(search.getText()))
            {
                ecoSystem.getDeliverymanagerdir().getDeliveryManagerList().remove(e);

            }}
                    break; 
                case "Delivery Man":
                     for (Delivery_Man e: ecoSystem.getDeliverymandir().getDelveryManList())
        {
            if(e.getEmailId().equals(search.getText()))
            {
                ecoSystem.getDeliverymandir().getDelveryManList().remove(e);

            }}
                    break;
                case "Doctor":
                   
                     for (Doctor e: ecoSystem.getDocdir().getDocList())
        {
            if(e.getEmailId().equals(search.getText()))
            {
                ecoSystem.getDocdir().getDocList().remove(e);

            }}
                      break;
                case "Insurance Specialist":
                   
                     for (InsuranceSpecialist e: ecoSystem.getInsurancespecialist().getInsuranceSpecialistList())
        {
            if(e.getEmailId().equals(search.getText()))
            {
                ecoSystem.getInsurancespecialist().getInsuranceSpecialistList().remove(e);

            }} 
                     break;                   
                case "Lab Manager":
                     for (Lab_Manager e: ecoSystem.getLabmanagerdir().getLabManagerList())
        {
            if(e.getEmailId().equals(search.getText()))
            {
               ecoSystem.getLabmanagerdir().getLabManagerList().remove(e);

            }} 
                    break;
                case "Operation Manager":
                     for (Operation_Manager e: ecoSystem.getOperationmanagerdir().getOpManagerList())
        {
            if(e.getEmailId().equals(search.getText()))
            {
               ecoSystem.getOperationmanagerdir().getOpManagerList().remove(e);

            }} 
                     break;
                case "Patient":
                    for (Patient e: ecoSystem.getPatientdir().getPatientList())
        {
            if(e.getEmailId().equals(search.getText()))
            {
               ecoSystem.getPatientdir().getPatientList().remove(e);

            }} 
                    break;
                case "Finance Manager":
                     for (Payment_Manager e: ecoSystem.getPaymentmanager().getPaymentManagerList())
        {
            if(e.getEmailId().equals(search.getText()))
            {
               ecoSystem.getPaymentmanager().getPaymentManagerList().remove(e);

            }} 
                    break;
                case "Pharmacist":
                     for (Pharmacist e: ecoSystem.getPharmacist().getPharmacistList())
        {
            if(e.getEmailId().equals(search.getText()))
            {
              ecoSystem.getPharmacist().getPharmacistList().remove(e);

            }} 
                    break;
                case "Volunteer":
                 for (Volunteer e: ecoSystem.getVolunteerdir().getVolunteerList())
        {
            if(e.getEmailId().equals(search.getText()))
            {
              ecoSystem.getVolunteerdir().getVolunteerList().remove(e);

            }}     
                     break;
                case "Volunteer Manager":
                      for (Volunteer_Manager e: ecoSystem.getVolunteermanagerdir().getVolunteerManagerList())
        {
            if(e.getEmailId().equals(search.getText()))
            {
              ecoSystem.getVolunteermanagerdir().getVolunteerManagerList().remove(e);

            }}     
                    break;
                default:
                    break;
            }

    }//GEN-LAST:event_deleteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField addressLine3;
    private javax.swing.JTextField addressLine4;
    private javax.swing.JComboBox<String> city1;
    private javax.swing.JButton delete;
    private com.toedter.calendar.JDateChooser dob1;
    private javax.swing.JTextField eMailId1;
    private javax.swing.JTextField firstName1;
    private javax.swing.JComboBox<String> gender1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField lastName1;
    private javax.swing.JTable person;
    private javax.swing.JTextField phone1;
    private javax.swing.JComboBox<String> role;
    private javax.swing.JTextField search;
    private javax.swing.JTextField state1;
    private javax.swing.JButton update;
    private javax.swing.JTextField zipCode1;
    // End of variables declaration//GEN-END:variables

    private void TableFilling() {
    DefaultTableModel model = (DefaultTableModel) person.getModel();
        model.setRowCount(0);
        for(Person en : ecoSystem.getPersondir().getPersonList()){
              
            Object[] row = new Object[8];
            row[0] = en.getFirstName()+" "+en.getLastName();
            row[1] = en.getEmailId();
            row[2] = en.getHouse().getAddressLine1()+", "+en.getHouse().getAddressLine2();
            row[3] = en.getHouse().getCity();
            row[4] = en.getHouse().getState();
            row[5] = en.getDateOfBirth();
            row[6] = en.getRole();
            row[7] = en.getPassword();
            model.addRow(row);
            }
        
    }
}
